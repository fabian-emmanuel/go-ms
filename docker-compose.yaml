services:
  account:
    container_name: account
    build:
      context: .
      dockerfile: ./account/app.dockerfile
    depends_on:
      account_db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:postgres@account_db:5432/postgres?sslmode=disable
      ACCOUNT_SERVICE_PORT: 8080
    restart: on-failure
    networks:
      - microservices-net

  catalog:
    container_name: catalog
    build:
      context: .
      dockerfile: ./catalog/app.dockerfile
    depends_on:
      catalog_db:
        condition: service_healthy
    environment:
      DATABASE_URL: http://catalog_db:9200
      CATALOG_SERVICE_PORT: 8080
    restart: on-failure
    networks:
      - microservices-net

  order:
    container_name: order
    build:
      context: .
      dockerfile: ./order/app.dockerfile
    depends_on:
      order_db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:postgres@order_db:5432/postgres?sslmode=disable
      ORDER_SERVICE_PORT: 8080
      ACCOUNT_SERVICE_URL: http://account:8080
      CATALOG_SERVICE_URL: http://catalog:8080
    restart: on-failure
    networks:
      - microservices-net

  graphql:
    container_name: graphql
    build:
      context: .
      dockerfile: ./graphql/app.dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - account
      - catalog
      - order
    environment:
      ACCOUNT_SERVICE_URL: http://account:8080
      CATALOG_SERVICE_URL: http://catalog:8080
      ORDER_SERVICE_URL: http://order:8080
      GRAPHQL_SERVICE_PORT: 8000
    restart: on-failure
    networks:
      - microservices-net

  account_db:
    container_name: account_db
    build:
      context: ./account
      dockerfile: ./db.dockerfile
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - account_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Expose PostgreSQL port
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  catalog_db:
    container_name: catalog_db
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
    volumes:
      - catalog_db_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"  # Expose Elasticsearch port
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices-net

  order_db:
    container_name: order_db
    build:
      context: ./order
      dockerfile: ./db.dockerfile
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - order_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Expose PostgreSQL port on a different host port
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  account_db_data:
  catalog_db_data:
  order_db_data: